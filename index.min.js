class t extends HTMLElement{static get observedAttributes(){return["src","context"]}attributeChangedCallback(t,e,s){this.__initialized&&e!==s&&(this[t]=s)}get src(){return this.getAttribute("src")}set src(t){this.setAttribute("src",t),this.setSrc(),this.render()}get context(){return this.getAttribute("context")}set context(t){this.setAttribute("context",t),this.setContext(),this.render()}constructor(){super(),this.__initialized=!1,this.__template="",this.__context={}}async connectedCallback(){this.hasAttribute("src")&&await this.setSrc(),this.hasAttribute("context")&&await this.setContext(),this.render(),this.__initialized=!0}async setSrc(){const t=this.getAttribute("src");this.__template=await this.fetchSrc(t)}async fetchSrc(t){const e=await fetch(t);if(200!==e.status)throw Error(`ERR ${e.status}: ${e.statusText}`);return e.text()}async setContext(){const t=this.getAttribute("context");this.__context=await this.fetchContext(t)}async fetchContext(t){const e=await fetch(t);if(200!==e.status)throw Error(`ERR ${e.status}: ${e.statusText}`);return e.json()}render(){this.innerHTML=function(t,e={}){const s=Object.keys(e),i=Object.values(e);return new Function(...s,`return \`${t}\`;`)(...i)}(this.__template,this.__context)}}customElements.define("wc-template",t);export{t as WCTemplate};
